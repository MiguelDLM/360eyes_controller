import socket
import time
import logging

_LOGGER = logging.getLogger(__name__)

DOMAIN = "ptz_camera"
DEFAULT_HOST = "192.168.1.68"
DEFAULT_MOVE_TIME = 0.5
ATTR_HOST = "host"
ATTR_MOVE_TIME = "move_time"
ATTR_MOVE_DIRECTION = "move_direction"
DEFAULT_MOVE_DIRECTION = "none"

# IPC365 configuration
IPC365_DEFAULT_PORT = 23456
IPC365_TCP_TIMEOUT = 5

# IPC365 PTZ Commands (hexadecimal)
IPC365_COMMANDS = {
    'right': bytes([0xcc, 0xdd, 0xee, 0xff, 0x77, 0x4f, 0x00, 0x00, 0xe3, 0x12, 0x69, 0x00,
                    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x93, 0xc6, 0x3b,
                    0x09, 0xf7, 0x4b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
    'left':  bytes([0xcc, 0xdd, 0xee, 0xff, 0x77, 0x4f, 0x00, 0x00, 0xe3, 0x12, 0x69, 0x00,
                    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x93, 0xc6, 0x3b,
                    0x09, 0xf7, 0x4b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
    'up':    bytes([0xcc, 0xdd, 0xee, 0xff, 0x77, 0x4f, 0x00, 0x00, 0xe3, 0x12, 0x69, 0x00,
                    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x93, 0xc6, 0x3b,
                    0x09, 0xf7, 0x4b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
    'down':  bytes([0xcc, 0xdd, 0xee, 0xff, 0x77, 0x4f, 0x00, 0x00, 0xe3, 0x12, 0x69, 0x00,
                    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x93, 0xc6, 0x3b,
                    0x09, 0xf7, 0x4b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xff,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
    'stop':  bytes([0xcc, 0xdd, 0xee, 0xff, 0x77, 0x4f, 0x00, 0x00, 0xe3, 0x12, 0x69, 0x00,
                    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x93, 0xc6, 0x3b,
                    0x09, 0xf7, 0x4b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
}

def setup(hass, config):

    def send_ipc365_command(host, command, port=IPC365_DEFAULT_PORT, duration=None):
        """Send PTZ command to IPC365 camera via TCP"""
        try:
            if command not in IPC365_COMMANDS:
                _LOGGER.error(f"Unknown IPC365 command: {command}")
                return False
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(IPC365_TCP_TIMEOUT)
            sock.connect((host, port))
            command_bytes = IPC365_COMMANDS[command]
            bytes_sent = sock.send(command_bytes)
            _LOGGER.info(f"IPC365 command '{command}' sent successfully to {host}:{port} ({bytes_sent} bytes)")
            # Para comandos de movimiento, enviar stop después de la duración
            if command in ['right', 'left', 'up', 'down'] and duration and duration > 0:
                time.sleep(duration)
                stop_bytes = IPC365_COMMANDS['stop']
                stop_sent = sock.send(stop_bytes)
                _LOGGER.info(f"IPC365 STOP command sent automatically ({stop_sent} bytes)")
            sock.close()
            return True
        except Exception as e:
            _LOGGER.error(f"Error sending IPC365 command '{command}' to {host}:{port}: {e}")
            try:
                sock.close()
            except:
                pass
            return False

    def move(call, move_time, x_coord=0.0, y_coord=0.0, use_stop=True):
        host = call.data.get(ATTR_HOST, DEFAULT_HOST)
        direction = None
        if x_coord > 0:
            direction = 'right'
        elif x_coord < 0:
            direction = 'left'
        elif y_coord > 0:
            direction = 'up'
        elif y_coord < 0:
            direction = 'down'
        if direction:
            duration = move_time if use_stop else 0
            send_ipc365_command(host, direction, duration=duration)
            if not use_stop and move_time > 0:
                time.sleep(move_time)
                send_ipc365_command(host, 'stop')

    def move_to_direction(call):
        direction = call.data.get(ATTR_MOVE_DIRECTION, DEFAULT_MOVE_DIRECTION).lower()
        move_time = call.data.get(ATTR_MOVE_TIME, DEFAULT_MOVE_TIME)
        if direction in ['up', 'down', 'left', 'right']:
            send_ipc365_command(call.data.get(ATTR_HOST, DEFAULT_HOST), direction, duration=move_time)

    def move_left(call):
        move_time = call.data.get(ATTR_MOVE_TIME, DEFAULT_MOVE_TIME)
        move(call, move_time, -0.1, 0.0)

    def move_right(call):
        move_time = call.data.get(ATTR_MOVE_TIME, DEFAULT_MOVE_TIME)
        move(call, move_time, 0.1, 0.0)

    def move_up(call):
        move_time = call.data.get(ATTR_MOVE_TIME, DEFAULT_MOVE_TIME)
        move(call, move_time, 0.0, 0.1)

    def move_down(call):
        move_time = call.data.get(ATTR_MOVE_TIME, DEFAULT_MOVE_TIME)
        move(call, move_time, 0.0, -0.1)

    def stop(call):
        host = call.data.get(ATTR_HOST, DEFAULT_HOST)
        send_ipc365_command(host, 'stop')

    hass.services.register(DOMAIN, "move_to_direction", move_to_direction)
    hass.services.register(DOMAIN, "move_left", move_left)
    hass.services.register(DOMAIN, "move_right", move_right)
    hass.services.register(DOMAIN, "move_up", move_up)
    hass.services.register(DOMAIN, "move_down", move_down)
    hass.services.register(DOMAIN, "stop", stop)

    return True